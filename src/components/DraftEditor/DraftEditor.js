/* eslint react/no-set-state: 0 */
/* eslint react/no-did-update-set-state: 0 */
/**
 * This module provides a reusable draft-powered text wysiwig editor component
 * @module bulgur/components/DraftEditor
 */
import React, {Component, PropTypes} from 'react';
import Editor from 'draft-js-plugins-editor';
import {
  RichUtils,
  EditorState,
  convertFromRaw,
  convertToRaw
} from 'draft-js';

import createRichButtonsPlugin from 'draft-js-richbuttons-plugin';

const richButtonsPlugin = createRichButtonsPlugin();

import './DraftEditor.scss';


import {translateNameSpacer} from '../../helpers/translateUtils';

const {
  // inline buttons
  ItalicButton,
  BoldButton,
  // MonospaceButton,
  UnderlineButton,
  // block buttons
  // ParagraphButton,
  // BlockquoteButton,
  // CodeButton,
  // OLButton,
  // ULButton,
  // H1Button,
  // H2Button,
  // H3Button,
  // H4Button,
  // H5Button,
  // H6Button
} = richButtonsPlugin;

export default class QuinoaDraftEditor extends Component {

  static contextTypes = {
    t: PropTypes.func.isRequired
  }

  constructor (props) {
    super(props);
    // little hack to a bug generated by the editor plugin
    // which calls illegitimately onChange when plugins are initialized
    // (https://github.com/draft-js-plugins/draft-js-plugins/issues/311)
    this.state = {
      initialized: false,
      focused: false,
      editorState: props.content ? EditorState.createWithContent(convertFromRaw(props.content)) : EditorState.createEmpty(),
      content: props.content
    };

    this.onEditorChange = (editorState) => {
      if (this.state.initialized) {
        const newContent = convertToRaw(editorState.getCurrentContent());
        let content;
        if (JSON.stringify(newContent) !== JSON.stringify(this.state.content)) {
          content = newContent;
        }
 else content = this.state.content;
        this.setState({
          editorState,
          content
        });
        this.props.update(content);
      }
      else {
        this.setState({
          initialized: true
        });
      }
    };
    this.handleKeyCommand = this.handleKeyCommand.bind(this);
  }

  // todo : rehabilitate that if editor's content can be changed by external contents
  componentWillReceiveProps() {
    // update editor if content representation is different between props and state
    // if (this.state.content && props.content && JSON.stringify(props.content) !== JSON.stringify(this.state.content)) {
    //   console.log('update editor');
    //   this.setState({
    //     editorState: EditorState.createWithContent(convertFromRaw(props.content)),
    //     content: props.content
    //   });
    // }
  }

  shouldComponentUpdate() {
    return true;
    //this.state.content !== nextState.content;
  }

  handleKeyCommand(command) {
    const newState = RichUtils.handleKeyCommand(this.state.editorState, command);
    if (newState && typeof this.props.update === 'function') {
      this.onEditorChange(newState);
      return 'handled';
    }
    return 'not-handled';
  }

  render() {
    const translate = translateNameSpacer(this.context.t, 'Components.DraftEditor');
    const onChange = state => this.onEditorChange(state);
    const onGlobalClick = e => {
      e.stopPropagation();
      this.editorComponent.focus();
    };
    const onFocus = () => this.setState({focused: true});
    const onBlur = () => this.setState({focused: false});
    return (
      <div
        className={'fonio-draft-editor ' + (this.state.focused ? 'focused' : '')}
        onClick={onGlobalClick}>
        <div className="rich-buttons">
          <div className="buttons-group">
            <BoldButton label={translate('bold')} />
            <ItalicButton label={translate('italic')} />
            <UnderlineButton label={translate('underline')} />
          </div>

          {/*
          <div className="buttons-group">
            <ParagraphButton />
            <BlockquoteButton />
            <ULButton>List</ULButton>
          </div>
        */}
        </div>
        <Editor
          editorState={this.state.editorState}
          onChange={onChange}
          handleKeyCommand={this.handleKeyCommand}
          placeholder={translate('write-your-story-here')}
          ref={(editorComponent) => {
this.editorComponent = editorComponent;
}}
          onFocus={onFocus}
          onBlur={onBlur}
          plugins={[
              richButtonsPlugin
            ]} />
      </div>
    );
  }
}
